@model IEnumerable<FinanceApp.Models.Expense>

<h2>My Expenses</h2>

<div class="container">
    <table class="table table-bordered">
        <thead class="table-light">
        <th>Description</th>
        <th>Amount</th>
        <th>Category</th>
        <th>Date</th>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Description</td>
                    <td>@item.Amount $</td>
                    <td>@item.Category</td>
                    <td>@item.Date.ToString("yyyy-MM-dd")</td>
                </tr>
            }
        </tbody>
    </table>
</div>


<h2>Expenses Overview</h2>

<div style="width: 500px; height: 500px; margin: auto;">
    <canvas id="myChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const ctx = document.getElementById('myChart').getContext('2d');

    fetch('/Expenses/GetChart')
      .then(response => response.json())
      .then(data => {
        new Chart(ctx, {
          type: 'pie',
          data: {
            labels: data.map(d => d.category),
            datasets: [{
              label: 'Expense by Category',
              data: data.map(d => d.total),
              backgroundColor: [
                '#f87171', // red
                '#60a5fa', // blue
                '#34d399', // green
                '#fbbf24', // yellow
                '#a78bfa', // purple
                '#fdba74', // orange
              ],
              borderColor: '#ffffff',
              borderWidth: 2,
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: {
                display: true,
                text: 'Expense Distribution by Category',
                font: {
                  size: 18
                }
              },
              legend: {
                position: 'bottom'
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const label = context.label || '';
                    const value = context.parsed;
                    return `${label}: $${value}`;
                  }
                }
              }
            }
          }
        });
      });
</script>
